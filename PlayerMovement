using UnityEngine;
using System;
using Palmmedia.ReportGenerator.Core.Reporting.Builders;
using System.Security.Cryptography;


public class PlayerMovement : MonoBehaviour
{
    Rigidbody rb;
    Camera camC;
    public float speed, sensitivity, jumpStrength, mass, maxDegree, changeSpeed, rot, rotEnd;
    public float rotationX, rotationY;
    public GameObject cam;
    public GameObject wallRunWall;
    private float newFOV=90;
    public bool isWallRunning=false;
    public bool left;
    // Start is called before the first frame update
    void Start()
    {
        Cursor.lockState = CursorLockMode.Locked;
        rb = gameObject.GetComponent<Rigidbody>();
        camC = cam.GetComponent<Camera>();
    }

    // Update is called once per frame
    void Update()
    {
        //Fov Changer
        newFOV = 90 + rb.velocity.magnitude;
        if (camC.fieldOfView < newFOV)
        {
            camC.fieldOfView += 1 / (rb.velocity.magnitude + 1);
        }
        if (camC.fieldOfView > newFOV)
        {
            camC.fieldOfView -= 1/(rb.velocity.magnitude+1);
        }
        rotationX -= Input.GetAxis("Mouse Y") * sensitivity;
        rotationY += Input.GetAxis("Mouse X") * sensitivity;
        transform.rotation = Quaternion.Euler(transform.rotation.x, rotationY, transform.rotation.z);
        cam.transform.rotation = Quaternion.Euler(Math.Clamp(rotationX,-maxDegree,maxDegree), rotationY,-rot); 
        if (isWallRunning==false) {
if (Input.GetKey(KeyCode.W)) 
        {
            rb.velocity += transform.forward * Time.deltaTime * speed / (rb.velocity.magnitude+1);
        }
        if (Input.GetKey(KeyCode.A))
        {
            rb.velocity -= transform.right * Time.deltaTime * speed / (rb.velocity.magnitude+1);
        }
        if (Input.GetKey(KeyCode.S))
        {
            rb.velocity -= transform.forward * Time.deltaTime * speed / (rb.velocity.magnitude +1);
        }
        if (Input.GetKey(KeyCode.D))
        {
            rb.velocity += transform.right * Time.deltaTime * speed / (rb.velocity.magnitude + 1);   
        }
        }
        
        RaycastHit hit;
        Physics.Raycast(transform.position, -transform.up, out hit, 2f);

        if (Input.GetKeyDown(KeyCode.Space))
        {
                 if (hit.collider != null)
                 {
                    rb.velocity += transform.up * jumpStrength/2;
                 }    
        }
             RaycastHit hitLeft;
             Physics.Raycast(transform.position, -transform.right, out hitLeft, 1.5f);
             RaycastHit hitRight;
             Physics.Raycast(transform.position, transform.right, out hitRight, 1.5f);
             if (isWallRunning==false) {
             if(hitRight.collider!=null && hitRight.collider.gameObject!=wallRunWall) 
             {
              left=false;
              wallRunWall = hitRight.collider.gameObject;
              rotEnd=-15;
              StartWallRun();
              return;
             } 
             if(hitLeft.collider!=null&& hitLeft.collider.gameObject!=wallRunWall) 
             {
                left = true;
                wallRunWall = hitLeft.collider.gameObject;
                rotEnd=15;
              StartWallRun();
              return;
             }       
             }
            
            if (isWallRunning==true) 
            {
                if (hitLeft.collider==null && hitRight.collider==null) {
                    StopWallRun();
                }
             if (Input.GetKeyDown(KeyCode.Space)) {
              StopWallRun();
              return;
             }
            }
        float calRot = rot + (rotEnd - rot) * Time.deltaTime * changeSpeed;
        rot = Mathf.Round(calRot*100)/100;
    }
    void StopWallRun() {
      isWallRunning= false;
      rotEnd=0;
      Debug.Log("rotatedCameraBack");
     rb.velocity += (cam.transform.forward)*jumpStrength;
    }
    void StartWallRun() 
    {
     isWallRunning = true;
     Debug.Log("rotatedCamera");
     rb.velocity = rb.velocity+Vector3.up*jumpStrength/2+ new Vector3(0,rb.velocity.y,0);
    return;
    }
    void OnCollisionStay(Collision Collider) {
        if (Collider.gameObject.tag == "Floor") {
            rotEnd=0;
            isWallRunning= false;
            wallRunWall=null;
        }
    }
}
